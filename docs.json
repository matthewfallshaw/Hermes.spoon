[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "Toggles play\/pause of current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Toggles play\/pause of current Hermes track",
          ""
        ],
        "def" : "Hermes.playpause()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.playpause()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Toggles play\/pause of current Hermes track",
        "name" : "playpause"
      },
      {
        "doc" : "Plays the current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Plays the current Hermes track",
          ""
        ],
        "def" : "Hermes.play()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.play()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Plays the current Hermes track",
        "name" : "play"
      },
      {
        "doc" : "Pauses the current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Pauses the current Hermes track",
          ""
        ],
        "def" : "Hermes.pause()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.pause()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Pauses the current Hermes track",
        "name" : "pause"
      },
      {
        "doc" : "Skips to the next Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Skips to the next Hermes track",
          ""
        ],
        "def" : "Hermes.next()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.next()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Skips to the next Hermes track",
        "name" : "next"
      },
      {
        "doc" : "Likes (thumbs up) the current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Likes (thumbs up) the current Hermes track",
          ""
        ],
        "def" : "Hermes.like()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.like()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Likes (thumbs up) the current Hermes track",
        "name" : "like"
      },
      {
        "doc" : "Dislikes (thumbs down) the current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Dislikes (thumbs down) the current Hermes track",
          ""
        ],
        "def" : "Hermes.dislike()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.dislike()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Dislikes (thumbs down) the current Hermes track",
        "name" : "dislike"
      },
      {
        "doc" : "Puts the current Hermes track on the shelf for a while\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Puts the current Hermes track on the shelf for a while",
          ""
        ],
        "def" : "Hermes.tired()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.tired()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Puts the current Hermes track on the shelf for a while",
        "name" : "tired"
      },
      {
        "doc" : "Quit Hermes\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Quit Hermes",
          ""
        ],
        "def" : "Hermes.quit()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.quit()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Quit Hermes",
        "name" : "quit"
      },
      {
        "doc" : "Hide (or show) Hermes\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Hide (or show) Hermes",
          ""
        ],
        "def" : "Hermes.hide()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.hide()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Hide (or show) Hermes",
        "name" : "hide"
      },
      {
        "doc" : "Displays information for current track on screen\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Displays information for current track on screen",
          ""
        ],
        "def" : "Hermes.displayCurrentTrack()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.displayCurrentTrack()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Displays information for current track on screen",
        "name" : "displayCurrentTrack"
      },
      {
        "doc" : "Sets the Hermes playback volume\n\nParameters:\n * vol - A number, between 0 and 100\n\nReturns:\n * None",
        "stripped_doc" : [
          "Sets the Hermes playback volume",
          ""
        ],
        "def" : "Hermes.setVolume(volume)",
        "parameters" : [
          " * vol - A number, between 0 and 100",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.setVolume(volume)",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Sets the Hermes playback volume",
        "name" : "setVolume"
      },
      {
        "doc" : "Toggle Hermes mute state\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Toggle Hermes mute state",
          ""
        ],
        "def" : "Hermes.mute()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.mute()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Toggle Hermes mute state",
        "name" : "mute"
      },
      {
        "doc" : "Increases the Hermes playback volume\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Increases the Hermes playback volume",
          ""
        ],
        "def" : "Hermes.volumeUp()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.volumeUp()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Increases the Hermes playback volume",
        "name" : "volumeUp"
      },
      {
        "doc" : "Decreases the Hermes playback volume\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Decreases the Hermes playback volume",
          ""
        ],
        "def" : "Hermes.volumeDown()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.volumeDown()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Decreases the Hermes playback volume",
        "name" : "volumeDown"
      },
      {
        "doc" : "Gets the name of the current Artist\n\nParameters:\n * None\n\nReturns:\n * A string containing the Artist of the current track, or nil if an error occurred",
        "stripped_doc" : [
          "Gets the name of the current Artist",
          ""
        ],
        "def" : "Hermes.getCurrentArtist() -> string or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getCurrentArtist() -> string or nil",
        "type" : "Function",
        "returns" : [
          " * A string containing the Artist of the current track, or nil if an error occurred"
        ],
        "desc" : "Gets the name of the current Artist",
        "name" : "getCurrentArtist"
      },
      {
        "doc" : "Gets the name of the current Album\n\nParameters:\n * None\n\nReturns:\n * A string containing the Album of the current track, or nil if an error occurred",
        "stripped_doc" : [
          "Gets the name of the current Album",
          ""
        ],
        "def" : "Hermes.getCurrentAlbum() -> string or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getCurrentAlbum() -> string or nil",
        "type" : "Function",
        "returns" : [
          " * A string containing the Album of the current track, or nil if an error occurred"
        ],
        "desc" : "Gets the name of the current Album",
        "name" : "getCurrentAlbum"
      },
      {
        "doc" : "Gets the name of the current track\n\nParameters:\n * None\n\nReturns:\n * A string containing the name of the current track, or nil if an error occurred",
        "stripped_doc" : [
          "Gets the name of the current track",
          ""
        ],
        "def" : "Hermes.getCurrentTrack() -> string or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getCurrentTrack() -> string or nil",
        "type" : "Function",
        "returns" : [
          " * A string containing the name of the current track, or nil if an error occurred"
        ],
        "desc" : "Gets the name of the current track",
        "name" : "getCurrentTrack"
      },
      {
        "doc" : "Gets the rating of the current track; 1:liked, 0:normal, -1:disliked\n\nParameters:\n * None\n\nReturns:\n * A number, the rating of the current track, or nil if an error occurred",
        "stripped_doc" : [
          "Gets the rating of the current track; 1:liked, 0:normal, -1:disliked",
          ""
        ],
        "def" : "Hermes.getCurrentRating() -> number or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getCurrentRating() -> number or nil",
        "type" : "Function",
        "returns" : [
          " * A number, the rating of the current track, or nil if an error occurred"
        ],
        "desc" : "Gets the rating of the current track; 1:liked, 0:normal, -1:disliked",
        "name" : "getCurrentRating"
      },
      {
        "doc" : "Gets the current playback state of Hermes\n\nParameters:\n * None\n\nReturns:\n * A string containing one of the following constants:\n   - `Hermes.state_stopped`\n   - `Hermes.state_paused`\n   - `Hermes.state_playing`",
        "stripped_doc" : [
          "Gets the current playback state of Hermes",
          ""
        ],
        "def" : "Hermes.getPlaybackState() -> string or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getPlaybackState() -> string or nil",
        "type" : "Function",
        "returns" : [
          " * A string containing one of the following constants:",
          "   - `Hermes.state_stopped`",
          "   - `Hermes.state_paused`",
          "   - `Hermes.state_playing`"
        ],
        "desc" : "Gets the current playback state of Hermes",
        "name" : "getPlaybackState"
      },
      {
        "doc" : "Returns whether Hermes is currently open. Most other functions in Hermes.spoon will automatically start the application, so this function can be used to guard against that.\n\nParameters:\n * None\n\nReturns:\n * A boolean value indicating whether the Hermes application is running.",
        "stripped_doc" : [
          "Returns whether Hermes is currently open. Most other functions in Hermes.spoon will automatically start the application, so this function can be used to guard against that.",
          ""
        ],
        "def" : "Hermes.isRunning() -> boolean",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.isRunning() -> boolean",
        "type" : "Function",
        "returns" : [
          " * A boolean value indicating whether the Hermes application is running."
        ],
        "desc" : "Returns whether Hermes is currently open. Most other functions in Hermes.spoon will automatically start the application, so this function can be used to guard against that.",
        "name" : "isRunning"
      },
      {
        "doc" : "Returns whether Hermes is currently playing\n\nParameters:\n * None\n\nReturns:\n * A boolean value indicating whether Hermes is currently playing a track, or nil if an error occurred (unknown player state). Also returns false if the application is not running",
        "stripped_doc" : [
          "Returns whether Hermes is currently playing",
          ""
        ],
        "def" : "Hermes.isPlaying() -> boolean or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.isPlaying() -> boolean or nil",
        "type" : "Function",
        "returns" : [
          " * A boolean value indicating whether Hermes is currently playing a track, or nil if an error occurred (unknown player state). Also returns false if the application is not running"
        ],
        "desc" : "Returns whether Hermes is currently playing",
        "name" : "isPlaying"
      },
      {
        "doc" : "Gets the current Hermes volume setting\n\nParameters:\n * None\n\nReturns:\n * A number, between 1 and 100, containing the current Hermes playback volume",
        "stripped_doc" : [
          "Gets the current Hermes volume setting",
          ""
        ],
        "def" : "Hermes.getVolume() -> number",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getVolume() -> number",
        "type" : "Function",
        "returns" : [
          " * A number, between 1 and 100, containing the current Hermes playback volume"
        ],
        "desc" : "Gets the current Hermes volume setting",
        "name" : "getVolume"
      },
      {
        "doc" : "Gets the playback position (in seconds) of the current song\n\nParameters:\n * None\n\nReturns:\n * A number indicating the current position in the song",
        "stripped_doc" : [
          "Gets the playback position (in seconds) of the current song",
          ""
        ],
        "def" : "Hermes.getPosition() -> number",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getPosition() -> number",
        "type" : "Function",
        "returns" : [
          " * A number indicating the current position in the song"
        ],
        "desc" : "Gets the playback position (in seconds) of the current song",
        "name" : "getPosition"
      },
      {
        "doc" : "Gets the duration (in seconds) of the current song\n\nParameters:\n * None\n\nReturns:\n * The number of seconds long the current song is, 0 if no song is playing",
        "stripped_doc" : [
          "Gets the duration (in seconds) of the current song",
          ""
        ],
        "def" : "Hermes.getDuration() -> number",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getDuration() -> number",
        "type" : "Function",
        "returns" : [
          " * The number of seconds long the current song is, 0 if no song is playing"
        ],
        "desc" : "Gets the duration (in seconds) of the current song",
        "name" : "getDuration"
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Controls for Hermes music player",
    "type" : "Module",
    "Deprecated" : [

    ],
    "Constructor" : [

    ],
    "doc" : "Controls for Hermes music player",
    "Method" : [
      {
        "doc" : "Binds hotkeys for Hermes\n\nParameters:\n * mapping - A table containing hotkey modifier\/key details for the following items:\n  * see docs.json",
        "stripped_doc" : [
          "Binds hotkeys for Hermes",
          ""
        ],
        "def" : "Hermes:bindHotkeys(mapping)",
        "parameters" : [
          " * mapping - A table containing hotkey modifier\/key details for the following items:",
          "  * see docs.json"
        ],
        "notes" : [

        ],
        "signature" : "Hermes:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Binds hotkeys for Hermes",
        "name" : "bindHotkeys"
      }
    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Dislikes (thumbs down) the current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Dislikes (thumbs down) the current Hermes track",
          ""
        ],
        "def" : "Hermes.dislike()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.dislike()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Dislikes (thumbs down) the current Hermes track",
        "name" : "dislike"
      },
      {
        "doc" : "Displays information for current track on screen\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Displays information for current track on screen",
          ""
        ],
        "def" : "Hermes.displayCurrentTrack()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.displayCurrentTrack()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Displays information for current track on screen",
        "name" : "displayCurrentTrack"
      },
      {
        "doc" : "Gets the name of the current Album\n\nParameters:\n * None\n\nReturns:\n * A string containing the Album of the current track, or nil if an error occurred",
        "stripped_doc" : [
          "Gets the name of the current Album",
          ""
        ],
        "def" : "Hermes.getCurrentAlbum() -> string or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getCurrentAlbum() -> string or nil",
        "type" : "Function",
        "returns" : [
          " * A string containing the Album of the current track, or nil if an error occurred"
        ],
        "desc" : "Gets the name of the current Album",
        "name" : "getCurrentAlbum"
      },
      {
        "doc" : "Gets the name of the current Artist\n\nParameters:\n * None\n\nReturns:\n * A string containing the Artist of the current track, or nil if an error occurred",
        "stripped_doc" : [
          "Gets the name of the current Artist",
          ""
        ],
        "def" : "Hermes.getCurrentArtist() -> string or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getCurrentArtist() -> string or nil",
        "type" : "Function",
        "returns" : [
          " * A string containing the Artist of the current track, or nil if an error occurred"
        ],
        "desc" : "Gets the name of the current Artist",
        "name" : "getCurrentArtist"
      },
      {
        "doc" : "Gets the rating of the current track; 1:liked, 0:normal, -1:disliked\n\nParameters:\n * None\n\nReturns:\n * A number, the rating of the current track, or nil if an error occurred",
        "stripped_doc" : [
          "Gets the rating of the current track; 1:liked, 0:normal, -1:disliked",
          ""
        ],
        "def" : "Hermes.getCurrentRating() -> number or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getCurrentRating() -> number or nil",
        "type" : "Function",
        "returns" : [
          " * A number, the rating of the current track, or nil if an error occurred"
        ],
        "desc" : "Gets the rating of the current track; 1:liked, 0:normal, -1:disliked",
        "name" : "getCurrentRating"
      },
      {
        "doc" : "Gets the name of the current track\n\nParameters:\n * None\n\nReturns:\n * A string containing the name of the current track, or nil if an error occurred",
        "stripped_doc" : [
          "Gets the name of the current track",
          ""
        ],
        "def" : "Hermes.getCurrentTrack() -> string or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getCurrentTrack() -> string or nil",
        "type" : "Function",
        "returns" : [
          " * A string containing the name of the current track, or nil if an error occurred"
        ],
        "desc" : "Gets the name of the current track",
        "name" : "getCurrentTrack"
      },
      {
        "doc" : "Gets the duration (in seconds) of the current song\n\nParameters:\n * None\n\nReturns:\n * The number of seconds long the current song is, 0 if no song is playing",
        "stripped_doc" : [
          "Gets the duration (in seconds) of the current song",
          ""
        ],
        "def" : "Hermes.getDuration() -> number",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getDuration() -> number",
        "type" : "Function",
        "returns" : [
          " * The number of seconds long the current song is, 0 if no song is playing"
        ],
        "desc" : "Gets the duration (in seconds) of the current song",
        "name" : "getDuration"
      },
      {
        "doc" : "Gets the current playback state of Hermes\n\nParameters:\n * None\n\nReturns:\n * A string containing one of the following constants:\n   - `Hermes.state_stopped`\n   - `Hermes.state_paused`\n   - `Hermes.state_playing`",
        "stripped_doc" : [
          "Gets the current playback state of Hermes",
          ""
        ],
        "def" : "Hermes.getPlaybackState() -> string or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getPlaybackState() -> string or nil",
        "type" : "Function",
        "returns" : [
          " * A string containing one of the following constants:",
          "   - `Hermes.state_stopped`",
          "   - `Hermes.state_paused`",
          "   - `Hermes.state_playing`"
        ],
        "desc" : "Gets the current playback state of Hermes",
        "name" : "getPlaybackState"
      },
      {
        "doc" : "Gets the playback position (in seconds) of the current song\n\nParameters:\n * None\n\nReturns:\n * A number indicating the current position in the song",
        "stripped_doc" : [
          "Gets the playback position (in seconds) of the current song",
          ""
        ],
        "def" : "Hermes.getPosition() -> number",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getPosition() -> number",
        "type" : "Function",
        "returns" : [
          " * A number indicating the current position in the song"
        ],
        "desc" : "Gets the playback position (in seconds) of the current song",
        "name" : "getPosition"
      },
      {
        "doc" : "Gets the current Hermes volume setting\n\nParameters:\n * None\n\nReturns:\n * A number, between 1 and 100, containing the current Hermes playback volume",
        "stripped_doc" : [
          "Gets the current Hermes volume setting",
          ""
        ],
        "def" : "Hermes.getVolume() -> number",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.getVolume() -> number",
        "type" : "Function",
        "returns" : [
          " * A number, between 1 and 100, containing the current Hermes playback volume"
        ],
        "desc" : "Gets the current Hermes volume setting",
        "name" : "getVolume"
      },
      {
        "doc" : "Hide (or show) Hermes\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Hide (or show) Hermes",
          ""
        ],
        "def" : "Hermes.hide()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.hide()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Hide (or show) Hermes",
        "name" : "hide"
      },
      {
        "doc" : "Returns whether Hermes is currently playing\n\nParameters:\n * None\n\nReturns:\n * A boolean value indicating whether Hermes is currently playing a track, or nil if an error occurred (unknown player state). Also returns false if the application is not running",
        "stripped_doc" : [
          "Returns whether Hermes is currently playing",
          ""
        ],
        "def" : "Hermes.isPlaying() -> boolean or nil",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.isPlaying() -> boolean or nil",
        "type" : "Function",
        "returns" : [
          " * A boolean value indicating whether Hermes is currently playing a track, or nil if an error occurred (unknown player state). Also returns false if the application is not running"
        ],
        "desc" : "Returns whether Hermes is currently playing",
        "name" : "isPlaying"
      },
      {
        "doc" : "Returns whether Hermes is currently open. Most other functions in Hermes.spoon will automatically start the application, so this function can be used to guard against that.\n\nParameters:\n * None\n\nReturns:\n * A boolean value indicating whether the Hermes application is running.",
        "stripped_doc" : [
          "Returns whether Hermes is currently open. Most other functions in Hermes.spoon will automatically start the application, so this function can be used to guard against that.",
          ""
        ],
        "def" : "Hermes.isRunning() -> boolean",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.isRunning() -> boolean",
        "type" : "Function",
        "returns" : [
          " * A boolean value indicating whether the Hermes application is running."
        ],
        "desc" : "Returns whether Hermes is currently open. Most other functions in Hermes.spoon will automatically start the application, so this function can be used to guard against that.",
        "name" : "isRunning"
      },
      {
        "doc" : "Likes (thumbs up) the current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Likes (thumbs up) the current Hermes track",
          ""
        ],
        "def" : "Hermes.like()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.like()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Likes (thumbs up) the current Hermes track",
        "name" : "like"
      },
      {
        "doc" : "Toggle Hermes mute state\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Toggle Hermes mute state",
          ""
        ],
        "def" : "Hermes.mute()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.mute()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Toggle Hermes mute state",
        "name" : "mute"
      },
      {
        "doc" : "Skips to the next Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Skips to the next Hermes track",
          ""
        ],
        "def" : "Hermes.next()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.next()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Skips to the next Hermes track",
        "name" : "next"
      },
      {
        "doc" : "Pauses the current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Pauses the current Hermes track",
          ""
        ],
        "def" : "Hermes.pause()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.pause()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Pauses the current Hermes track",
        "name" : "pause"
      },
      {
        "doc" : "Plays the current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Plays the current Hermes track",
          ""
        ],
        "def" : "Hermes.play()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.play()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Plays the current Hermes track",
        "name" : "play"
      },
      {
        "doc" : "Toggles play\/pause of current Hermes track\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Toggles play\/pause of current Hermes track",
          ""
        ],
        "def" : "Hermes.playpause()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.playpause()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Toggles play\/pause of current Hermes track",
        "name" : "playpause"
      },
      {
        "doc" : "Quit Hermes\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Quit Hermes",
          ""
        ],
        "def" : "Hermes.quit()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.quit()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Quit Hermes",
        "name" : "quit"
      },
      {
        "doc" : "Sets the Hermes playback volume\n\nParameters:\n * vol - A number, between 0 and 100\n\nReturns:\n * None",
        "stripped_doc" : [
          "Sets the Hermes playback volume",
          ""
        ],
        "def" : "Hermes.setVolume(volume)",
        "parameters" : [
          " * vol - A number, between 0 and 100",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.setVolume(volume)",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Sets the Hermes playback volume",
        "name" : "setVolume"
      },
      {
        "doc" : "Puts the current Hermes track on the shelf for a while\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Puts the current Hermes track on the shelf for a while",
          ""
        ],
        "def" : "Hermes.tired()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.tired()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Puts the current Hermes track on the shelf for a while",
        "name" : "tired"
      },
      {
        "doc" : "Decreases the Hermes playback volume\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Decreases the Hermes playback volume",
          ""
        ],
        "def" : "Hermes.volumeDown()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.volumeDown()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Decreases the Hermes playback volume",
        "name" : "volumeDown"
      },
      {
        "doc" : "Increases the Hermes playback volume\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Increases the Hermes playback volume",
          ""
        ],
        "def" : "Hermes.volumeUp()",
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Hermes.volumeUp()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "desc" : "Increases the Hermes playback volume",
        "name" : "volumeUp"
      },
      {
        "doc" : "Binds hotkeys for Hermes\n\nParameters:\n * mapping - A table containing hotkey modifier\/key details for the following items:\n  * see docs.json",
        "stripped_doc" : [
          "Binds hotkeys for Hermes",
          ""
        ],
        "def" : "Hermes:bindHotkeys(mapping)",
        "parameters" : [
          " * mapping - A table containing hotkey modifier\/key details for the following items:",
          "  * see docs.json"
        ],
        "notes" : [

        ],
        "signature" : "Hermes:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Binds hotkeys for Hermes",
        "name" : "bindHotkeys"
      }
    ],
    "Field" : [

    ],
    "name" : "Hermes"
  }
]